package com.gitlab.skibcsit.petstore

trait SwaggerPetstoreOpenapi30 extends endpoints4s.algebra.Endpoints with endpoints4s.algebra.circe.JsonEntitiesFromCodecs with endpoints4s.algebra.StatusCodes {
  import io.circe.generic.auto._
  val addPet = endpoint(request(Post, path./("pet"), jsonRequest[Pet], Some("Add a new pet to the store")), response(OK, jsonResponse[Pet], Some("Successful operation")).orElse(response(MethodNotAllowed, textResponse, Some("Invalid input"))))
  val createUser = endpoint(request(Post, path./("user"), jsonRequest[User], Some("This can only be done by the logged in user.")), response(OK, jsonResponse[User], Some("successful operation")))
  val createUsersWithListInput = endpoint(request(Post, path./("user")./("createWithList"), jsonRequest[Iterable[User]], Some("Creates list of users with given input array")), response(OK, jsonResponse[User], Some("Successful operation")))
  val deleteOrder = endpoint(request(Delete, path./("store")./("order")./(segment[Long]("orderId")), emptyRequest, Some("For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors")), response(OK, textResponse, None).orElse(response(BadRequest, textResponse, Some("Invalid ID supplied"))).orElse(response(NotFound, textResponse, Some("Order not found"))))
  val deletePet = endpoint(request(Delete, path./("pet")./(segment[Long]("petId")), emptyRequest, None), response(OK, textResponse, None).orElse(response(BadRequest, textResponse, Some("Invalid pet value"))))
  val deleteUser = endpoint(request(Delete, path./("user")./(segment[String]("username")), emptyRequest, Some("This can only be done by the logged in user.")), response(OK, textResponse, None).orElse(response(BadRequest, textResponse, Some("Invalid username supplied"))).orElse(response(NotFound, textResponse, Some("User not found"))))
  val findPetsByStatus = endpoint(request(Get, path./("pet")./("findByStatus")./?(qs[String]("status")), emptyRequest, Some("Multiple status values can be provided with comma separated strings")), response(OK, jsonResponse[Iterable[Pet]], Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid status value"))))
  val findPetsByTags = endpoint(request(Get, path./("pet")./("findByTags")./?(qs[Iterable[String]]("tags")), emptyRequest, Some("Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.")), response(OK, jsonResponse[Iterable[Pet]], Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid tag value"))))
  val getInventory = endpoint(request(Get, path./("store")./("inventory"), emptyRequest, Some("Returns a map of status codes to quantities")), response(OK, textResponse, Some("successful operation")))
  val getOrderById = endpoint(request(Get, path./("store")./("order")./(segment[Long]("orderId")), emptyRequest, Some("For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions")), response(OK, jsonResponse[Order], Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid ID supplied"))).orElse(response(NotFound, textResponse, Some("Order not found"))))
  val getPetById = endpoint(request(Get, path./("pet")./(segment[Long]("petId")), emptyRequest, Some("Returns a single pet")), response(OK, jsonResponse[Pet], Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid ID supplied"))).orElse(response(NotFound, textResponse, Some("Pet not found"))))
  val getUserByName = endpoint(request(Get, path./("user")./(segment[String]("username")), emptyRequest, None), response(OK, jsonResponse[User], Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid username supplied"))).orElse(response(NotFound, textResponse, Some("User not found"))))
  val loginUser = endpoint(request(Get, path./("user")./("login")./?(qs[String]("username").&(qs[String]("password"))), emptyRequest, None), response(OK, textResponse, Some("successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid username/password supplied"))))
  val logoutUser = endpoint(request(Get, path./("user")./("logout"), emptyRequest, None), response(OK, textResponse, Some("successful operation")))
  val placeOrder = endpoint(request(Post, path./("store")./("order"), jsonRequest[Order], Some("Place a new order in the store")), response(OK, jsonResponse[Order], Some("successful operation")).orElse(response(MethodNotAllowed, textResponse, Some("Invalid input"))))
  val updatePet = endpoint(request(Put, path./("pet"), jsonRequest[Pet], Some("Update an existing pet by Id")), response(OK, jsonResponse[Pet], Some("Successful operation")).orElse(response(BadRequest, textResponse, Some("Invalid ID supplied"))).orElse(response(NotFound, textResponse, Some("Pet not found"))).orElse(response(MethodNotAllowed, textResponse, Some("Validation exception"))))
  val updatePetWithForm = endpoint(request(Post, path./("pet")./(segment[Long]("petId"))./?(qs[String]("name").&(qs[String]("status"))), emptyRequest, None), response(OK, textResponse, None).orElse(response(MethodNotAllowed, textResponse, Some("Invalid input"))))
  val updateUser = endpoint(request(Put, path./("user")./(segment[String]("username")), jsonRequest[User], Some("This can only be done by the logged in user.")), response(OK, textResponse, Some("successful operation")))
  val uploadFile = endpoint(request(Post, path./("pet")./(segment[Long]("petId"))./("uploadImage")./?(qs[String]("additionalMetadata")), jsonRequest[Iterable[Byte]], None), response(OK, jsonResponse[ApiResponse], Some("successful operation")))
}